---
meta:
  generate-versions-file: &generate-versions-file
    task: generate-versions-file
    image: pcf-ops
    file: control-tower/ci/tasks/generate-versions-file.yml

  create-release: &create-release-files
    do:
    - in_parallel:
      - get: pcf-ops
        passed: [release-notification]
      - get: control-tower
        passed: [release-notification]
      - get: build-metadata
      - get: release-versions
    - *generate-versions-file
    - in_parallel: &build_binaries
      - task: build-linux
        image: pcf-ops
        params:
          GOARCH: amd64
          OUTPUT_FILE: control-tower-linux-amd64
        file: control-tower/ci/tasks/build_linux_from_version_file.yml
      - task: build-darwin-amd64
        image: pcf-ops
        params:
          GOARCH: amd64
          OUTPUT_FILE: control-tower-darwin-amd64
        file: control-tower/ci/tasks/build_from_version_file.yml
        output_mapping:
          build: build
      - task: build-darwin-arm64
        image: pcf-ops
        params:
          GOARCH: arm64
          OUTPUT_FILE: control-tower-darwin-arm64
        file: control-tower/ci/tasks/build_from_version_file.yml
        output_mapping:
          build: build
    - task: get-ops-version
      image: pcf-ops
      file: control-tower/ci/tasks/get-ops-version.yml
      params:
        CONCOURSE_PASSWORD: ((ebci_password))
        CONCOURSE_URL: https://ci.engineerbetter.com
    - task: write-release-vars
      image: pcf-ops
      file: control-tower/ci/tasks/write-release-vars.yml
      input_mapping:
        old-versions: release-versions
        new-versions: versions-file

  publish-release: &publish-release
    do:
    - put: release
      params:
        name: release-vars/name
        commitish: release-vars/commit
        body: release-vars/body
        tag: version/version
        globs:
        - build-linux/control-tower-linux-amd64
        - build-darwin-amd64/control-tower-darwin-amd64
        - build-darwin-arm64/control-tower-darwin-arm64
    - in_parallel:
      - put: release-versions
        params:
          file: versions-file/release-versions.json
      - put: version
        resource: version
        params:
          file: version/version

  publish-draft-release: &publish-draft-release
    do:
    - put: release-drafts
      params:
        name: release-vars/name
        commitish: release-vars/commit
        body: release-vars/body
        tag: version/version
        globs:
        - build-linux/control-tower-linux-amd64
        - build-darwin-amd64/control-tower-darwin-amd64
        - build-darwin-arm64/control-tower-darwin-arm64
    - in_parallel:
      - put: release-versions
        params:
          file: versions-file/release-versions.json
      - put: version
        resource: version
        params:
          file: version/version

groups:
- name: main
  jobs:
  - set-pipeline
  - setup-ci-bucket
  - unit-tests
  - build
  - smoke-test
  - system-test
  - system-test-update
  - system-test-rds-ca
  - system-test-m5
  - system-test-letsencrypt
  - system-test-options-and-destroy
  - system-test-zone-delegation
  - system-test-zone-delegation-gcp
  - system-test-options-and-destroy-gcp
  - system-test-letsencrypt-gcp
  - smoke-test-gcp
  - system-test-gcp
  - system-test-update-gcp
  - release-notification
  - auto
  - major
  - minor
  - patch
  - update-homebrew-formula
- name: cleanup
  jobs:
  - cleanup-aws
  - cleanup-gcp
- name: aws
  jobs:
  - smoke-test
  - system-test
  - system-test-update
  - system-test-rds-ca
  - system-test-m5
  - system-test-letsencrypt
  - system-test-options-and-destroy
  - system-test-zone-delegation
  - cleanup-aws
- name: gcp
  jobs:
  - system-test-zone-delegation-gcp
  - system-test-options-and-destroy-gcp
  - system-test-letsencrypt-gcp
  - smoke-test-gcp
  - system-test-gcp
  - system-test-update-gcp
  - cleanup-gcp

resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest

- name: build-metadata
  type: docker-image
  source:
    repository: mastertinner/build-metadata-resource

- name: bosh-io-release
  type: docker-image
  source:
    repository: engineerbetter/bosh-io-release-resource

- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: "1.0.11"

- name: github-release
  type: registry-image
  source:
    repository: concourse/github-release-resource
    tag: "1.5.5"

resources:
- name: ci-bucket
  type: terraform
  icon: terraform
  source:
    backend_type: s3
    backend_config:
      bucket: ((bucket-name))
      key: ci/tf/master.tfstate
      region: eu-west-1
      access_key: ((concourse_ci_s3_access_key))
      secret_key: ((concourse_ci_s3_secret_key))
    vars:
      bucket-name: ((bucket-name))
      region: eu-west-1
    env:
      AWS_ACCESS_KEY_ID: ((concourse_ci_s3_access_key))
      AWS_SECRET_ACCESS_KEY: ((concourse_ci_s3_secret_key))

- name: control-tower
  type: git
  icon: github
  source:
    uri: git@github.com:EngineerBetter/control-tower.git
    branch: ((branch))
    private_key: ((github_private_key))
    ignore_paths:
    - README.md
    - docs/

- name: homebrew-tap
  type: git
  icon: github
  source:
    uri: git@github.com:EngineerBetter/homebrew-tap.git
    branch: master
    private_key: ((github_private_key_homebrew))

- name: control-tower-ops
  type: git
  icon: github
  source:
    uri: git@github.com:EngineerBetter/control-tower-ops.git
    branch: master
    tag_filter: 0.*.*
    private_key: ((github_private_key))
    ignore_paths:
    - README.md

- name: pcf-ops
  type: registry-image
  icon: docker
  source:
    repository: engineerbetter/pcf-ops
    username: ((dockerhub_user))
    password: ((dockerhub_password))

- name: version
  type: semver
  icon: numeric
  source:
    initial_version: 0.0.0
    driver: s3
    bucket: control-tower-ci-artifacts
    key: version
    access_key_id: ((concourse_ci_s3_access_key))
    secret_access_key: ((concourse_ci_s3_secret_key))
    region_name: eu-west-1

- name: binary-linux
  type: s3
  icon: file-move
  source:
    bucket: control-tower-ci-artifacts
    versioned_file: ((binary-name))-linux-amd64
    access_key_id: ((concourse_ci_s3_access_key))
    secret_access_key: ((concourse_ci_s3_secret_key))
    region_name: eu-west-1

- name: binary-darwin-amd64
  type: s3
  icon: file-move
  source:
    bucket: control-tower-ci-artifacts
    versioned_file: ((binary-name))-darwin-amd64
    access_key_id: ((concourse_ci_s3_access_key))
    secret_access_key: ((concourse_ci_s3_secret_key))
    region_name: eu-west-1

- name: binary-darwin-arm64
  type: s3
  icon: file-move
  source:
    bucket: control-tower-ci-artifacts
    versioned_file: ((binary-name))-darwin-arm64
    access_key_id: ((concourse_ci_s3_access_key))
    secret_access_key: ((concourse_ci_s3_secret_key))
    region_name: eu-west-1

- name: release-versions
  type: s3
  icon: file-move
  source:
    bucket: control-tower-ci-artifacts
    versioned_file: release-versions.json
    access_key_id: ((concourse_ci_s3_access_key))
    secret_access_key: ((concourse_ci_s3_secret_key))
    region_name: eu-west-1

- name: release
  type: github-release
  icon: ferry
  source:
    user: engineerbetter
    repository: control-tower
    access_token: ((github_access_token))

- name: release-drafts
  type: github-release
  icon: ferry
  source:
    user: engineerbetter
    repository: control-tower
    access_token: ((github_access_token))
    drafts: true

- name: slack-alert
  type: slack-notification
  icon: slack
  source:
    url: ((slack_webhook))

- name: once-daily
  type: time
  icon: clock
  source: {interval: 24h}

- name: build-metadata
  type: build-metadata
  icon: file

jobs:
- name: set-pipeline
  serial: true
  plan:
  - get: control-tower
    trigger: true
  - set_pipeline: ((pipeline-name))
    file: control-tower/ci/pipeline.yml
    vars:
      binary-name: ((binary-name))
      branch: ((branch))
      bucket-name: ((bucket-name))
      pipeline-name: ((pipeline-name))
- name: setup-ci-bucket
  serial: true
  plan:
  - get: control-tower
    passed: [set-pipeline]
    trigger: true
  - put: ci-bucket
    params:
      terraform_source: control-tower/ci/tf
      env_name: ((branch))

- name: unit-tests
  plan:
  - in_parallel:
    - get: pcf-ops
    - get: control-tower
      trigger: true
      passed: [set-pipeline]
    - get: control-tower-ops
      trigger: true
  - task: lint
    image: pcf-ops
    file: control-tower/ci/tasks/lint.yml
    on_failure:
      put: slack-alert
      params:
        channel: "#integrations"
        text: |
          Control-Tower *((branch))* branch *lint* failure!
  - task: unit-test
    image: pcf-ops
    file: control-tower/ci/tasks/unit-test.yml
    on_failure:
      put: slack-alert
      params:
        channel: "#integrations"
        text: |
          Control-Tower *((branch))* branch *unit-test* failure!

- name: build
  plan:
  - in_parallel:
    - get: pcf-ops
      passed: [unit-tests]
    - get: control-tower
      trigger: true
      passed: [unit-tests, setup-ci-bucket]
    - get: control-tower-ops
      trigger: true
      passed: [unit-tests]
  - in_parallel:
    - do:
      - task: build-linux
        image: pcf-ops
        output_mapping:
          build: build-linux
        params:
          GOOS: linux
          GOARCH: amd64
          OUTPUT_FILE: ((binary-name))-linux-amd64
        file: control-tower/ci/tasks/build.yml
      - put: binary-linux
        inputs:
          - build-linux
        params:
          file: build-linux/((binary-name))-linux-amd64
    - do:
      - task: build-darwin-amd64
        image: pcf-ops
        output_mapping:
          build: build-darwin-amd64
        params:
          GOOS: darwin
          GOARCH: amd64
          OUTPUT_FILE: ((binary-name))-darwin-amd64
        file: control-tower/ci/tasks/build.yml
      - put: binary-darwin-amd64
        inputs:
          - build-darwin-amd64
        params:
          file: build-darwin-amd64/((binary-name))-darwin-amd64
    - do:
      - task: build-darwin-arm64
        image: pcf-ops
        output_mapping:
          build: build-darwin-arm64
        params:
          GOOS: darwin
          GOARCH: arm64
          OUTPUT_FILE: ((binary-name))-darwin-arm64
        file: control-tower/ci/tasks/build.yml
      - put: binary-darwin-arm64
        inputs:
          - build-darwin-arm64
        params:
          file: build-darwin-arm64/((binary-name))-darwin-arm64

- name: smoke-test
  serial_groups:
  - smoke-test
  serial: true
  plan:
  - in_parallel: &smoke-test-gets
    - get: binary-linux
      trigger: true
      passed: [build]
    - get: binary-darwin-amd64
      trigger: true
      passed: [build]
    - get: binary-darwin-arm64
      trigger: true
      passed: [build]
    - get: control-tower
      trigger: true
      passed: [build]
    - get: control-tower-ops
      trigger: true
      passed: [build]
    - get: pcf-ops
      passed: [build]
  - task: smoke-test
    file: control-tower/ci/tasks/smoke-test.yml
    params:
      AWS_ACCESS_KEY_ID: ((control_tower_test_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((control_tower_test_secret_key))
      BINARY_PATH: binary-linux/((binary-name))-linux-amd64
    on_failure:
      put: slack-alert
      params:
        channel: "#integrations"
        text: |
          Control-Tower *((branch))* branch *smoke-test* failure!

- name: smoke-test-gcp
  serial_groups:
  - smoke-test-gcp
  serial: true
  plan:
  - in_parallel: *smoke-test-gets
  - task: smoke-test
    file: control-tower/ci/tasks/smoke-test.yml
    params:
      BINARY_PATH: binary-linux/((binary-name))-linux-amd64
      GOOGLE_APPLICATION_CREDENTIALS_CONTENTS: ((system_test_google_application_credentials))
      IAAS: GCP
    on_failure:
      put: slack-alert
      params:
        channel: "#integrations"
        text: |
          Control-Tower *((branch))* branch *smoke-test-gcp* failure!

- name: system-test
  serial_groups:
  - system-test
  serial: true
  plan:
  - in_parallel: &system-test-gets
    - get: binary-linux
      trigger: true
      passed: [smoke-test]
    - get: binary-darwin-amd64
      trigger: true
      passed: [smoke-test]
    - get: binary-darwin-arm64
      trigger: true
      passed: [smoke-test]
    - get: control-tower
      trigger: true
      passed: [smoke-test]
    - get: control-tower-ops
      trigger: true
      passed: [smoke-test]
    - get: pcf-ops
      passed: [smoke-test]
  - task: system-test
    file: control-tower/ci/tasks/system-test.yml
    params:
      AWS_ACCESS_KEY_ID: ((control_tower_test_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((control_tower_test_secret_key))
      BINARY_PATH: binary-linux/((binary-name))-linux-amd64
      IAAS: AWS
    on_failure:
      put: slack-alert
      params:
        channel: "#integrations"
        text: |
          Control-Tower *((branch))* branch *system-test* failure!

- name: system-test-gcp
  serial_groups:
  - system-test-gcp
  serial: true
  plan:
  - in_parallel: &system-test-gets-gcp
    - get: binary-linux
      trigger: true
      passed: [smoke-test-gcp]
    - get: binary-darwin-amd64
      trigger: true
      passed: [smoke-test-gcp]
    - get: binary-darwin-arm64
      trigger: true
      passed: [smoke-test-gcp]
    - get: control-tower
      trigger: true
      passed: [smoke-test-gcp]
    - get: control-tower-ops
      trigger: true
      passed: [smoke-test-gcp]
    - get: pcf-ops
      passed: [smoke-test-gcp]
  - task: system-test
    file: control-tower/ci/tasks/system-test.yml
    params:
      GOOGLE_APPLICATION_CREDENTIALS_CONTENTS: ((system_test_google_application_credentials))
      IAAS: GCP
      BINARY_PATH: binary-linux/((binary-name))-linux-amd64
    on_failure:
      put: slack-alert
      params:
        channel: "#integrations"
        text: |
          Control-Tower *((branch))* branch *system-test-gcp* failure!

- name: system-test-rds-ca
  serial_groups:
  - system-test-rds-ca
  serial: true
  plan:
  - in_parallel: *system-test-gets
  - task: run-system-test-rds-ca
    file: control-tower/ci/tasks/system-test-rds-ca.yml
    params:
      AWS_ACCESS_KEY_ID: ((control_tower_test_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((control_tower_test_secret_key))
      BINARY_PATH: binary-linux/((binary-name))-linux-amd64
      IAAS: AWS
    on_failure:
      put: slack-alert
      params:
        channel: "#integrations"
        text: |
          Control-Tower *((branch))* branch *system-test-rds-ca* failure!

- name: system-test-update
  serial_groups:
  - system-test-update
  serial: true
  plan:
  - in_parallel: *system-test-gets
  - get: release
  - task: run-system-test-update
    file: control-tower/ci/tasks/system-test-update.yml
    params:
      AWS_ACCESS_KEY_ID: ((control_tower_test_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((control_tower_test_secret_key))
      BINARY_PATH: binary-linux/((binary-name))-linux-amd64
      IAAS: AWS
    on_failure:
      put: slack-alert
      params:
        channel: "#integrations"
        text: |
          Control-Tower *((branch))* branch *system-test-update* failure!

- name: system-test-update-gcp
  serial_groups:
  - system-test-update-gcp
  serial: true
  plan:
  - in_parallel: *system-test-gets-gcp
  - get: release
  - task: run-system-test-update
    file: control-tower/ci/tasks/system-test-update.yml
    params:
      BINARY_PATH: binary-linux/((binary-name))-linux-amd64
      GOOGLE_APPLICATION_CREDENTIALS_CONTENTS: ((system_test_google_application_credentials))
      IAAS: GCP
    on_failure:
      put: slack-alert
      params:
        channel: "#integrations"
        text: |
          Control-Tower *((branch))* branch *system-test-update-gcp* failure!

- name: system-test-m5
  serial_groups:
  - system-test-m5
  serial: true
  plan:
  - in_parallel: *system-test-gets
  - task: system-test-m5
    file: control-tower/ci/tasks/system-test-m5.yml
    params:
      AWS_ACCESS_KEY_ID: ((control_tower_test_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((control_tower_test_secret_key))
      BINARY_PATH: binary-linux/((binary-name))-linux-amd64
    on_failure:
      put: slack-alert
      params:
        channel: "#integrations"
        text: |
          Control-Tower *((branch))* branch *system-test-m5* failure!

- name: system-test-letsencrypt
  serial_groups:
  - system-test-letencrypt
  serial: true
  plan:
  - in_parallel: *system-test-gets
  - task: system-test-letsencrypt
    file: control-tower/ci/tasks/system-test-letsencrypt.yml
    params:
      IAAS: AWS
      AWS_ACCESS_KEY_ID: ((control_tower_test_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((control_tower_test_secret_key))
      BINARY_PATH: binary-linux/((binary-name))-linux-amd64
    on_failure:
      put: slack-alert
      params:
        channel: "#integrations"
        text: |
          Control-Tower *((branch))* branch *system-test-letsencrypt* failure!

- name: system-test-letsencrypt-gcp
  serial_groups:
  - system-test-letencrypt-gcp
  serial: true
  plan:
  - in_parallel: *system-test-gets-gcp
  - task: system-test-letsencrypt
    file: control-tower/ci/tasks/system-test-letsencrypt.yml
    params:
      IAAS: GCP
      GOOGLE_APPLICATION_CREDENTIALS_CONTENTS: ((system_test_google_application_credentials))
      BINARY_PATH: binary-linux/((binary-name))-linux-amd64
    on_failure:
      put: slack-alert
      params:
        channel: "#integrations"
        text: |
          Control-Tower *((branch))* branch *system-test-letsencrypt-gcp* failure!

- name: system-test-options-and-destroy
  serial_groups:
  - system-test-options-and-destroy
  serial: true
  plan:
  - in_parallel: *system-test-gets
  - task: system-test-options-and-destroy
    file: control-tower/ci/tasks/system-test-options-and-destroy.yml
    params:
      IAAS: AWS
      AWS_ACCESS_KEY_ID: ((control_tower_test_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((control_tower_test_secret_key))
      BINARY_PATH: binary-linux/((binary-name))-linux-amd64
      EB_WILDCARD_CERT: ((eb_wildcard.certificate))
      EB_WILDCARD_KEY: ((eb_wildcard.private_key))
      BITBUCKET_AUTH_CLIENT_ID: placeholder
      BITBUCKET_AUTH_CLIENT_SECRET: placeholder
      GITHUB_AUTH_CLIENT_ID: ((github_auth_client_id))
      GITHUB_AUTH_CLIENT_SECRET: ((github_auth_client_secret))
      MICROSOFT_AUTH_CLIENT_ID: placeholder
      MICROSOFT_AUTH_CLIENT_SECRET: placeholder
      MICROSOFT_AUTH_TENANT: placeholder
    on_failure:
      put: slack-alert
      params:
        channel: "#integrations"
        text: |
          Control-Tower *((branch))* branch *system-test-options-and-destroy* failure!
- name: system-test-options-and-destroy-gcp
  serial_groups:
  - system-test-options-and-destroy-gcp
  serial: true
  plan:
  - in_parallel: *system-test-gets-gcp
  - task: system-test-options-and-destroy
    file: control-tower/ci/tasks/system-test-options-and-destroy.yml
    params:
      GOOGLE_APPLICATION_CREDENTIALS_CONTENTS: ((system_test_google_application_credentials))
      IAAS: GCP
      BINARY_PATH: binary-linux/((binary-name))-linux-amd64
      EB_WILDCARD_CERT: ((eb_wildcard.certificate))
      EB_WILDCARD_KEY: ((eb_wildcard.private_key))
      BITBUCKET_AUTH_CLIENT_ID: placeholder
      BITBUCKET_AUTH_CLIENT_SECRET: placeholder
      GITHUB_AUTH_CLIENT_ID: ((github_auth_client_id_gcp))
      GITHUB_AUTH_CLIENT_SECRET: ((github_auth_client_secret_gcp))
      MICROSOFT_AUTH_CLIENT_ID: placeholder
      MICROSOFT_AUTH_CLIENT_SECRET: placeholder
      MICROSOFT_AUTH_TENANT: placeholder
    on_failure:
      put: slack-alert
      params:
        channel: "#integrations"
        text: |
          Control-Tower *((branch))* branch *system-test-options-and-destroy-gcp* failure!

- name: system-test-zone-delegation
  serial_groups:
  - system-test-zone-delegation
  serial: true
  plan:
  - in_parallel: *system-test-gets
  - task: system-test-zone-delegation
    file: control-tower/ci/tasks/system-test-zone-delegation.yml
    params:
      IAAS: AWS
      AWS_ACCESS_KEY_ID: ((control_tower_test_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((control_tower_test_secret_key))
      BINARY_PATH: binary-linux/((binary-name))-linux-amd64
      EB_WILDCARD_CERT: ((eb_wildcard.certificate))
      EB_WILDCARD_KEY: ((eb_wildcard.private_key))
      GITHUB_AUTH_CLIENT_ID: ((github_auth_client_id))
      GITHUB_AUTH_CLIENT_SECRET: ((github_auth_client_secret))
    on_failure:
      put: slack-alert
      params:
        channel: "#integrations"
        text: |
          Control-Tower *((branch))* branch *system-test-zone-delegation* failure!
- name: system-test-zone-delegation-gcp
  serial_groups:
  - system-test-zone-delegation-gcp
  serial: true
  plan:
  - in_parallel: *system-test-gets-gcp
  - task: system-test-zone-delegation
    file: control-tower/ci/tasks/system-test-zone-delegation.yml
    params:
      GOOGLE_APPLICATION_CREDENTIALS_CONTENTS: ((system_test_google_application_credentials))
      IAAS: GCP
      BINARY_PATH: binary-linux/((binary-name))-linux-amd64
      EB_WILDCARD_CERT: ((eb_wildcard.certificate))
      EB_WILDCARD_KEY: ((eb_wildcard.private_key))
      GITHUB_AUTH_CLIENT_ID: ((github_auth_client_id_gcp))
      GITHUB_AUTH_CLIENT_SECRET: ((github_auth_client_secret_gcp))
    on_failure:
      put: slack-alert
      params:
        channel: "#integrations"
        text: |
          Control-Tower *((branch))* branch *system-test-zone-delegation-gcp* failure!

- name: release-notification
  serial: true
  plan:
  - in_parallel:
    - get: pcf-ops
      passed: &system-tests
      - system-test
      - system-test-update
      - system-test-rds-ca
      - system-test-m5
      - system-test-letsencrypt
      - system-test-options-and-destroy
      - system-test-zone-delegation
      - system-test-gcp
      - system-test-options-and-destroy-gcp
      - system-test-letsencrypt-gcp
      - system-test-update-gcp
      - system-test-zone-delegation-gcp
    - get: control-tower
      trigger: true
      passed: *system-tests
    - get: control-tower-ops
      trigger: true
      passed: *system-tests
    - get: release-versions
  - *generate-versions-file
  - task: write-release-notification
    image: pcf-ops
    file: control-tower/ci/tasks/write-release-notification.yml
    input_mapping:
      old-versions: release-versions
      new-versions: versions-file
  - put: slack-alert
    params:
      channel: "#integrations"
      text_file: slack-message/text

- name: auto
  serial: true
  plan:
  - in_parallel:
    - get: control-tower-ops
      passed: [release-notification]
      trigger: true
    - get: version
      params:
        bump: patch
  - *create-release-files
  - *publish-release

- name: patch
  serial: true
  plan:
  - in_parallel:
    - get: version
      params:
        bump: patch
    - get: control-tower-ops
      passed: [release-notification]
  - *create-release-files
  - *publish-draft-release

- name: minor
  serial: true
  plan:
  - in_parallel:
    - get: version
      params:
        bump: minor
    - get: control-tower-ops
      passed: [release-notification]
  - *create-release-files
  - *publish-draft-release

- name: major
  serial: true
  plan:
  - in_parallel:
    - get: version
      params:
        bump: major
    - get: control-tower-ops
      passed: [release-notification]
  - *create-release-files
  - *publish-draft-release

- name: update-homebrew-formula
  serial: true
  plan:
  - in_parallel:
    - get: release
      trigger: true
    - get: homebrew-tap
    - get: control-tower
    - get: pcf-ops
  - task: update-homebrew-formula
    image: pcf-ops
    file: control-tower/ci/tasks/update-homebrew-formula.yml
  - put: homebrew-tap
    params:
      repository: homebrew-tap-updated


- name: cleanup-aws
  serial: true
  serial_groups:
  - smoke-test
  - system-test
  - system-test-update
  - system-test-rds-ca
  - system-test-m5
  - system-test-letsencrypt
  - system-test-options-and-destroy
  - system-test-zone-delegation
  plan:
  - in_parallel:
    - get: control-tower
    - get: once-daily
      trigger: true
    - get: binary-linux
  - task: cleanup
    file: control-tower/ci/tasks/cleanup-tests.yml
    params:
      AWS_ACCESS_KEY_ID: ((control_tower_test_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((control_tower_test_secret_key))
      IAAS: AWS
    on_failure:
      put: slack-alert
      params:
        channel: "#integrations"
        text: |
          Control-Tower AWS cleanup failure!

- name: cleanup-gcp
  serial: true
  serial_groups:
  - smoke-test-gcp
  - system-test-gcp
  - system-test-update-gcp
  - system-test-letsencrypt-gcp
  - system-test-options-and-destroy-gcp
  - system-test-zone-delegation-gcp
  plan:
  - in_parallel:
    - get: control-tower
    - get: once-daily
      trigger: true
    - get: binary-linux
    - get: pcf-ops
  - do:
    - task: cleanup
      file: control-tower/ci/tasks/cleanup-tests.yml
      params:
        GOOGLE_APPLICATION_CREDENTIALS_CONTENTS: ((system_test_google_application_credentials))
        IAAS: GCP
    - task: cleanup-orphaned-disks
      file: control-tower/ci/tasks/cleanup-orphaned-disks.yml
      image: pcf-ops
      params:
        GOOGLE_APPLICATION_CREDENTIALS_CONTENTS: ((system_test_google_application_credentials))
    on_failure:
      put: slack-alert
      params:
        channel: "#integrations"
        text: |
          Control-Tower GCP cleanup failure!
