---
groups:
- name: Main
  jobs:
  - set-pipeline
  - setup-ci-bucket
  - unit-tests
  - build
  - smoke-test
  - system-test
  - system-test-update
  - system-test-m5
  - system-test-letsencrypt
  - system-test-options-and-destroy
  - system-test-options-and-destroy-gcp
  - system-test-letsencrypt-gcp
  - smoke-test-gcp
  - system-test-gcp
  - system-test-update-gcp
  - release-notification
  - auto
  - major
  - minor
  - patch
- name: Cleanup
  jobs:
  - cleanup-aws
  - cleanup-gcp

resource_types:
- name: pipeline
  type: docker-image
  source:
    repository: peterellisjones/concourse-pipeline-resource

- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest

- name: build-metadata
  type: docker-image
  source:
    repository: mastertinner/build-metadata-resource

- name: bosh-io-release
  type: docker-image
  source:
    repository: engineerbetter/bosh-io-release-resource

- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource

resources:
- name: this-pipeline
  type: pipeline
  source:
    target: https://ci.engineerbetter.com
    insecure: "true"
    teams:
    - name: main
      username: admin
      password: ((atc_main_password))

- name: ci-bucket
  type: terraform
  source:
    storage:
      bucket_path: ci/tf
      bucket: ((bucket-name))
      access_key_id: ((concourse_ci_s3_access_key))
      secret_access_key: ((concourse_ci_s3_secret_key))
      region_name: eu-west-1
    vars:
      bucket-name: ((bucket-name))
      region: eu-west-1
    env:
      AWS_ACCESS_KEY_ID: ((concourse_ci_s3_access_key))
      AWS_SECRET_ACCESS_KEY: ((concourse_ci_s3_secret_key))

- name: control-tower
  type: git
  source:
    uri: git@github.com:EngineerBetter/control-tower.git
    branch: ((branch))
    private_key: ((github_private_key))
    ignore_paths:
    - README.md

- name: control-tower-ops
  type: git
  source:
    uri: git@github.com:EngineerBetter/control-tower-ops.git
    branch: master
    tag_filter: 0.*.*
    private_key: ((github_private_key))
    ignore_paths:
    - README.md

- name: pcf-ops
  type: docker-image
  source:
    repository: engineerbetter/pcf-ops
    username: ((dockerhub_user))
    password: ((dockerhub_password))

- name: version
  type: semver
  source:
    initial_version: 0.0.0
    driver: s3
    bucket: control-tower-ci-artifacts
    key: version
    access_key_id: ((concourse_ci_s3_access_key))
    secret_access_key: ((concourse_ci_s3_secret_key))
    region_name: eu-west-1

- name: binary-linux
  type: s3
  source:
    bucket: control-tower-ci-artifacts
    versioned_file: ((binary-name))-linux-amd64
    access_key_id: ((concourse_ci_s3_access_key))
    secret_access_key: ((concourse_ci_s3_secret_key))
    region_name: eu-west-1

- name: binary-darwin
  type: s3
  source:
    bucket: control-tower-ci-artifacts
    versioned_file: ((binary-name))-darwin-amd64
    access_key_id: ((concourse_ci_s3_access_key))
    secret_access_key: ((concourse_ci_s3_secret_key))
    region_name: eu-west-1

- name: release
  type: github-release
  source:
    user: engineerbetter
    repository: control-tower
    access_token: ((github_access_token))

- name: release-drafts
  type: github-release
  source:
    user: engineerbetter
    repository: control-tower
    access_token: ((github_access_token))
    drafts: true

- name: slack-alert
  type: slack-notification
  source:
    url: ((slack_webhook))

- name: once-daily
  type: time
  source: {interval: 24h}

- name: build-metadata
  type: build-metadata

jobs:
- name: set-pipeline
  serial: true
  plan:
  - get: control-tower
    trigger: true
  - put: this-pipeline
    params:
      pipelines:
      - name: ((pipeline-name))
        team: main
        config_file: control-tower/ci/pipeline.yml
        vars:
          binary-name: ((binary-name))
          branch: ((branch))
          bucket-name: ((bucket-name))
          pipeline-name: ((pipeline-name))

- name: setup-ci-bucket
  serial: true
  plan:
  - get: control-tower
    passed: [set-pipeline]
    trigger: true
  - put: ci-bucket
    params:
      terraform_source: control-tower/ci/tf
      env_name: ((branch))

- name: unit-tests
  plan:
  - aggregate:
    - get: pcf-ops
    - get: control-tower
      trigger: true
      passed: [set-pipeline]
    - get: control-tower-ops
      trigger: true
  - task: lint
    image: pcf-ops
    file: control-tower/ci/tasks/lint.yml
    on_failure:
      put: slack-alert
      params:
        channel: "#integrations"
        text: |
          <!channel> Control-Tower *((branch))* branch *lint* failure!
  - task: unit-test
    image: pcf-ops
    file: control-tower/ci/tasks/unit-test.yml
    on_failure:
      put: slack-alert
      params:
        channel: "#integrations"
        text: |
          <!channel> Control-Tower *((branch))* branch *unit-test* failure!

- name: build
  plan:
  - aggregate:
    - get: pcf-ops
      passed: [unit-tests]
    - get: control-tower
      trigger: true
      passed: [unit-tests, setup-ci-bucket]
    - get: control-tower-ops
      trigger: true
      passed: [unit-tests]
    - get: version
  - aggregate:
    - do:
      - task: build-linux
        image: pcf-ops
        params:
          GOOS: linux
          GOARCH: amd64
          OUTPUT_FILE: ((binary-name))-linux-amd64
        file: control-tower/ci/tasks/build_linux.yml
      - put: binary-linux
        params:
          file: build-linux/((binary-name))-linux-amd64
    - do:
      - task: build-darwin
        image: pcf-ops
        params:
          GOOS: darwin
          GOARCH: amd64
          OUTPUT_FILE: ((binary-name))-darwin-amd64
        file: control-tower/ci/tasks/build_darwin.yml
      - put: binary-darwin
        params:
          file: build-darwin/((binary-name))-darwin-amd64

- name: smoke-test
  serial_groups:
  - smoke-test
  serial: true
  plan:
  - aggregate: &smoke-test-gets
    - get: version
      passed: [build]
    - get: binary-linux
      trigger: true
      passed: [build]
    - get: binary-darwin
      trigger: true
      passed: [build]
    - get: control-tower
      trigger: true
      passed: [build]
    - get: control-tower-ops
      trigger: true
      passed: [build]
    - get: pcf-ops
      passed: [build]
      params:
        globs: [control-tower-linux-amd64]
  - task: smoke-test
    file: control-tower/ci/tasks/smoke-test.yml
    params:
      AWS_ACCESS_KEY_ID: ((control_tower_test_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((control_tower_test_secret_key))
      BINARY_PATH: binary-linux/((binary-name))-linux-amd64
    on_failure:
      put: slack-alert
      params:
        channel: "#integrations"
        text: |
          <!channel> Control-Tower *((branch))* branch *smoke-test* failure!

- name: smoke-test-gcp
  serial_groups:
  - smoke-test-gcp
  serial: true
  plan:
  - aggregate: *smoke-test-gets
  - task: smoke-test
    file: control-tower/ci/tasks/smoke-test.yml
    params:
      BINARY_PATH: binary-linux/((binary-name))-linux-amd64
      GOOGLE_APPLICATION_CREDENTIALS_CONTENTS: ((system_test_google_application_credentials))
      IAAS: GCP
    on_failure:
      put: slack-alert
      params:
        channel: "#integrations"
        text: |
          <!channel> Control-Tower *((branch))* branch *smoke-test-gcp* failure!

- name: system-test
  serial_groups:
  - system-test
  serial: true
  plan:
  - aggregate: &system-test-gets
    - get: version
      passed: [smoke-test]
    - get: binary-linux
      trigger: true
      passed: [smoke-test]
    - get: binary-darwin
      trigger: true
      passed: [smoke-test]
    - get: control-tower
      trigger: true
      passed: [smoke-test]
    - get: control-tower-ops
      trigger: true
      passed: [smoke-test]
    - get: pcf-ops
      passed: [smoke-test]
      params:
        globs: [control-tower-linux-amd64]
  - task: system-test
    file: control-tower/ci/tasks/system-test.yml
    params:
      AWS_ACCESS_KEY_ID: ((control_tower_test_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((control_tower_test_secret_key))
      BINARY_PATH: binary-linux/((binary-name))-linux-amd64
      IAAS: AWS
    on_failure:
      put: slack-alert
      params:
        channel: "#integrations"
        text: |
          <!channel> Control-Tower *((branch))* branch *system-test* failure!

- name: system-test-gcp
  serial_groups:
  - system-test-gcp
  serial: true
  plan:
  - aggregate: &system-test-gets-gcp
    - get: version
      passed: [smoke-test-gcp]
    - get: binary-linux
      trigger: true
      passed: [smoke-test-gcp]
    - get: binary-darwin
      trigger: true
      passed: [smoke-test-gcp]
    - get: control-tower
      trigger: true
      passed: [smoke-test-gcp]
    - get: control-tower-ops
      trigger: true
      passed: [smoke-test-gcp]
    - get: pcf-ops
      passed: [smoke-test-gcp]
      params:
        globs: [control-tower-linux-amd64]
  - task: system-test
    file: control-tower/ci/tasks/system-test.yml
    params:
      GOOGLE_APPLICATION_CREDENTIALS_CONTENTS: ((system_test_google_application_credentials))
      IAAS: GCP
      BINARY_PATH: binary-linux/((binary-name))-linux-amd64
    on_failure:
      put: slack-alert
      params:
        channel: "#integrations"
        text: |
          <!channel> Control-Tower *((branch))* branch *system-test-gcp* failure!

- name: system-test-update
  serial_groups:
  - system-test-update
  serial: true
  plan:
  - aggregate: *system-test-gets
  - get: release
  - task: run-system-test-update
    file: control-tower/ci/tasks/system-test-update.yml
    params:
      AWS_ACCESS_KEY_ID: ((control_tower_test_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((control_tower_test_secret_key))
      BINARY_PATH: binary-linux/((binary-name))-linux-amd64
      IAAS: AWS
    on_failure:
      put: slack-alert
      params:
        channel: "#integrations"
        text: |
          <!channel> Control-Tower *((branch))* branch *system-test-update* failure!

- name: system-test-update-gcp
  serial_groups:
  - system-test-update-gcp
  serial: true
  plan:
  - aggregate: *system-test-gets-gcp
  - get: release
  - task: run-system-test-update
    file: control-tower/ci/tasks/system-test-update.yml
    params:
      BINARY_PATH: binary-linux/((binary-name))-linux-amd64
      GOOGLE_APPLICATION_CREDENTIALS_CONTENTS: ((system_test_google_application_credentials))
      IAAS: GCP
    on_failure:
      put: slack-alert
      params:
        channel: "#integrations"
        text: |
          <!channel> Control-Tower *((branch))* branch *system-test-update-gcp* failure!

- name: system-test-m5
  serial_groups:
  - system-test-m5
  serial: true
  plan:
  - aggregate: *system-test-gets
  - task: system-test-m5
    file: control-tower/ci/tasks/system-test-m5.yml
    params:
      AWS_ACCESS_KEY_ID: ((control_tower_test_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((control_tower_test_secret_key))
      BINARY_PATH: binary-linux/((binary-name))-linux-amd64
    on_failure:
      put: slack-alert
      params:
        channel: "#integrations"
        text: |
          <!channel> Control-Tower *((branch))* branch *system-test-m5* failure!

- name: system-test-letsencrypt
  serial_groups:
  - system-test-letencrypt
  serial: true
  plan:
  - aggregate: *system-test-gets
  - task: system-test-letsencrypt
    file: control-tower/ci/tasks/system-test-letsencrypt.yml
    params:
      IAAS: AWS
      AWS_ACCESS_KEY_ID: ((control_tower_test_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((control_tower_test_secret_key))
      BINARY_PATH: binary-linux/((binary-name))-linux-amd64
    on_failure:
      put: slack-alert
      params:
        channel: "#integrations"
        text: |
          <!channel> Control-Tower *((branch))* branch *system-test-letsencrypt* failure!

- name: system-test-letsencrypt-gcp
  serial_groups:
  - system-test-letencrypt-gcp
  serial: true
  plan:
  - aggregate: *system-test-gets-gcp
  - task: system-test-letsencrypt
    file: control-tower/ci/tasks/system-test-letsencrypt.yml
    params:
      IAAS: GCP
      GOOGLE_APPLICATION_CREDENTIALS_CONTENTS: ((system_test_google_application_credentials))
      BINARY_PATH: binary-linux/((binary-name))-linux-amd64
    on_failure:
      put: slack-alert
      params:
        channel: "#integrations"
        text: |
          <!channel> Control-Tower *((branch))* branch *system-test-letsencrypt-gcp* failure!

- name: system-test-options-and-destroy
  serial_groups:
  - system-test-options-and-destroy
  serial: true
  plan:
  - aggregate: *system-test-gets
  - task: system-test-options-and-destroy
    file: control-tower/ci/tasks/system-test-options-and-destroy.yml
    params:
      IAAS: AWS
      AWS_ACCESS_KEY_ID: ((control_tower_test_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((control_tower_test_secret_key))
      BINARY_PATH: binary-linux/((binary-name))-linux-amd64
      EB_WILDCARD_CERT: ((eb_wildcard.certificate))
      EB_WILDCARD_KEY: ((eb_wildcard.private_key))
      GITHUB_AUTH_CLIENT_ID: ((github_auth_client_id))
      GITHUB_AUTH_CLIENT_SECRET: ((github_auth_client_secret))
      GITHUB_AUTH_HOST: ((github_auth_host))
    on_failure:
      put: slack-alert
      params:
        channel: "#integrations"
        text: |
          <!channel> Control-Tower *((branch))* branch *system-test-options-and-destroy* failure!
- name: system-test-options-and-destroy-gcp
  serial_groups:
  - system-test-options-and-destroy-gcp
  serial: true
  plan:
  - aggregate: *system-test-gets-gcp
  - task: system-test-options-and-destroy
    file: control-tower/ci/tasks/system-test-options-and-destroy.yml
    params:
      GOOGLE_APPLICATION_CREDENTIALS_CONTENTS: ((system_test_google_application_credentials))
      IAAS: GCP
      BINARY_PATH: binary-linux/((binary-name))-linux-amd64
      EB_WILDCARD_CERT: ((eb_wildcard.certificate))
      EB_WILDCARD_KEY: ((eb_wildcard.private_key))
      GITHUB_AUTH_CLIENT_ID: ((github_auth_client_id_gcp))
      GITHUB_AUTH_CLIENT_SECRET: ((github_auth_client_secret_gcp))
      GITHUB_AUTH_HOST: ((github_auth_host))
    on_failure:
      put: slack-alert
      params:
        channel: "#integrations"
        text: |
          <!channel> Control-Tower *((branch))* branch *system-test-options-and-destroy-gcp* failure!

- name: release-notification
  serial: true
  plan:
  - aggregate:
    - get: version
      trigger: true
      passed: &system-tests
      - system-test
      - system-test-update
      - system-test-m5
      - system-test-letsencrypt
      - system-test-options-and-destroy
      - system-test-gcp
      - system-test-options-and-destroy-gcp
      - system-test-letsencrypt-gcp
      - system-test-update-gcp
    - get: pcf-ops
      passed: *system-tests
    - get: control-tower
      trigger: true
      passed: *system-tests
    - get: control-tower-ops
      trigger: true
      passed: *system-tests
  - task: write-release-notification
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: engineerbetter/pcf-ops
      inputs:
      - name: control-tower
      - name: control-tower-ops
      outputs:
      - name: slack-message
      run:
        path: bash
        args:
        - -c
        - |
          CUP_REF="$(cat control-tower/.git/ref)"
          OPS_REF="$(cat control-tower-ops/.git/ref)"
          CUP_MESSAGE="$(cat control-tower/.git/commit_message)"
          OPS_MESSAGE="$(cat control-tower-ops/.git/commit_message)"
          cat << EOF > slack-message/text
          Control-Tower is ready for a new release, all system tests passed.

          Latest commit in *control-tower* repository: \`$CUP_REF\`
          \`\`\`$CUP_MESSAGE\`\`\`

          Latest commit in *control-tower-ops* repository: \`$OPS_REF\`
          \`\`\`$OPS_MESSAGE\`\`\`
          EOF
  - put: slack-alert
    params:
      channel: "#integrations"
      text_file: slack-message/text

- name: auto
  serial: true
  plan:
  - aggregate:
    - get: pcf-ops
      passed: [release-notification]
    - get: control-tower
      passed: [release-notification]
    - get: control-tower-ops
      trigger: true
      passed: [release-notification]
    - get: version
      passed: [release-notification]
      params:
        bump: patch
    - get: build-metadata
  - aggregate: &build_binaries
    - task: build-linux
      image: pcf-ops
      params:
        GOARCH: amd64
        OUTPUT_FILE: control-tower-linux-amd64
      file: control-tower/ci/tasks/build_linux_from_version_file.yml
    - task: build-darwin
      image: pcf-ops
      params:
        GOARCH: amd64
        OUTPUT_FILE: control-tower-darwin-amd64
      file: control-tower/ci/tasks/build_darwin_from_version_file.yml
  - task: get-ops-version
    image: pcf-ops
    file: control-tower/ci/tasks/get-ops-version.yml
    params:
      CONCOURSE_PASSWORD: ((ebci_password))
      CONCOURSE_URL: https://ci.engineerbetter.com
  - task: write-release-vars
    image: pcf-ops
    file: control-tower/ci/tasks/write-release-vars.yml
  - put: release
    params:
      name: release-vars/name
      commitish: release-vars/commit
      body: release-vars/body
      tag: version/version
      globs:
      - build-linux/control-tower-linux-amd64
      - build-darwin/control-tower-darwin-amd64
  - put: version
    resource: version
    params:
      file: version/version

- name: patch
  serial: true
  plan:
  - aggregate:
    - get: version
      params:
        bump: patch
      passed: [release-notification]
    - get: pcf-ops
      passed: [release-notification]
    - get: control-tower
      passed: [release-notification]
    - get: control-tower-ops
      passed: [release-notification]
    - get: build-metadata
  - aggregate: *build_binaries
  - task: get-ops-version
    image: pcf-ops
    file: control-tower/ci/tasks/get-ops-version.yml
    params:
      CONCOURSE_PASSWORD: ((ebci_password))
      CONCOURSE_URL: https://ci.engineerbetter.com
  - task: write-release-vars
    image: pcf-ops
    file: control-tower/ci/tasks/write-release-vars.yml
  - put: release-drafts
    params:
      name: release-vars/name
      commitish: release-vars/commit
      body: release-vars/body
      tag: version/version
      globs:
      - build-linux/control-tower-linux-amd64
      - build-darwin/control-tower-darwin-amd64
  - put: version
    resource: version
    params:
      file: version/version

- name: minor
  serial: true
  plan:
  - aggregate:
    - get: version
      params:
        bump: minor
      passed: [release-notification]
    - get: pcf-ops
      passed: [release-notification]
    - get: control-tower
      passed: [release-notification]
    - get: control-tower-ops
      passed: [release-notification]
    - get: build-metadata
  - aggregate: *build_binaries
  - task: get-ops-version
    image: pcf-ops
    file: control-tower/ci/tasks/get-ops-version.yml
    params:
      CONCOURSE_PASSWORD: ((ebci_password))
      CONCOURSE_URL: https://ci.engineerbetter.com
  - task: write-release-vars
    image: pcf-ops
    file: control-tower/ci/tasks/write-release-vars.yml
  - put: release-drafts
    params:
      name: release-vars/name
      commitish: release-vars/commit
      body: release-vars/body
      tag: version/version
      globs:
      - build-linux/control-tower-linux-amd64
      - build-darwin/control-tower-darwin-amd64
  - put: version
    resource: version
    params:
      file: version/version

- name: major
  serial: true
  plan:
  - aggregate:
    - get: version
      passed: [release-notification]
      params:
        bump: major
    - get: pcf-ops
      passed: [release-notification]
    - get: control-tower
      passed: [release-notification]
    - get: control-tower-ops
      passed: [release-notification]
    - get: build-metadata
  - aggregate: *build_binaries
  - task: get-ops-version
    image: pcf-ops
    file: control-tower/ci/tasks/get-ops-version.yml
    params:
      CONCOURSE_PASSWORD: ((ebci_password))
      CONCOURSE_URL: https://ci.engineerbetter.com
  - task: write-release-vars
    image: pcf-ops
    file: control-tower/ci/tasks/write-release-vars.yml
  - put: release-drafts
    params:
      name: release-vars/name
      commitish: release-vars/commit
      body: release-vars/body
      tag: version/version
      globs:
      - build-linux/control-tower-linux-amd64
      - build-darwin/control-tower-darwin-amd64
  - put: version
    resource: version
    params:
      file: version/version

- name: cleanup-aws
  serial: true
  serial_groups:
  - smoke-test
  - system-test
  - system-test-update
  - system-test-m5
  - system-test-letsencrypt
  - system-test-options-and-destroy
  plan:
  - aggregate:
    - get: control-tower
    - get: once-daily
      trigger: true
    - get: binary-linux
  - task: cleanup
    file: control-tower/ci/tasks/cleanup-tests.yml
    params:
      AWS_ACCESS_KEY_ID: ((control_tower_test_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((control_tower_test_secret_key))
      IAAS: AWS
    on_failure:
      put: slack-alert
      params:
        channel: "#integrations"
        text: |
          Control-Tower AWS cleanup failure!

- name: cleanup-gcp
  serial: true
  serial_groups:
  - smoke-test-gcp
  - system-test-gcp
  - system-test-update-gcp
  - system-test-letsencrypt-gcp
  - system-test-options-and-destroy-gcp
  plan:
  - aggregate:
    - get: control-tower
    - get: once-daily
      trigger: true
    - get: binary-linux
  - task: cleanup
    file: control-tower/ci/tasks/cleanup-tests.yml
    params:
      GOOGLE_APPLICATION_CREDENTIALS_CONTENTS: ((system_test_google_application_credentials))
      IAAS: GCP
    on_failure:
      put: slack-alert
      params:
        channel: "#integrations"
        text: |
          Control-Tower GCP cleanup failure!
