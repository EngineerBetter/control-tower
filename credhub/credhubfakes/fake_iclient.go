// Code generated by counterfeiter. DO NOT EDIT.
package credhubfakes

import (
	"sync"

	"github.com/EngineerBetter/control-tower/credhub"
	"github.com/EngineerBetter/control-tower/iaas"
	"github.com/EngineerBetter/control-tower/terraform"
)

type FakeIClient struct {
	SetSelfUpdateCredsStub        func(iaas.Provider, terraform.Outputs) error
	setSelfUpdateCredsMutex       sync.RWMutex
	setSelfUpdateCredsArgsForCall []struct {
		arg1 iaas.Provider
		arg2 terraform.Outputs
	}
	setSelfUpdateCredsReturns struct {
		result1 error
	}
	setSelfUpdateCredsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIClient) SetSelfUpdateCreds(arg1 iaas.Provider, arg2 terraform.Outputs) error {
	fake.setSelfUpdateCredsMutex.Lock()
	ret, specificReturn := fake.setSelfUpdateCredsReturnsOnCall[len(fake.setSelfUpdateCredsArgsForCall)]
	fake.setSelfUpdateCredsArgsForCall = append(fake.setSelfUpdateCredsArgsForCall, struct {
		arg1 iaas.Provider
		arg2 terraform.Outputs
	}{arg1, arg2})
	stub := fake.SetSelfUpdateCredsStub
	fakeReturns := fake.setSelfUpdateCredsReturns
	fake.recordInvocation("SetSelfUpdateCreds", []interface{}{arg1, arg2})
	fake.setSelfUpdateCredsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIClient) SetSelfUpdateCredsCallCount() int {
	fake.setSelfUpdateCredsMutex.RLock()
	defer fake.setSelfUpdateCredsMutex.RUnlock()
	return len(fake.setSelfUpdateCredsArgsForCall)
}

func (fake *FakeIClient) SetSelfUpdateCredsCalls(stub func(iaas.Provider, terraform.Outputs) error) {
	fake.setSelfUpdateCredsMutex.Lock()
	defer fake.setSelfUpdateCredsMutex.Unlock()
	fake.SetSelfUpdateCredsStub = stub
}

func (fake *FakeIClient) SetSelfUpdateCredsArgsForCall(i int) (iaas.Provider, terraform.Outputs) {
	fake.setSelfUpdateCredsMutex.RLock()
	defer fake.setSelfUpdateCredsMutex.RUnlock()
	argsForCall := fake.setSelfUpdateCredsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIClient) SetSelfUpdateCredsReturns(result1 error) {
	fake.setSelfUpdateCredsMutex.Lock()
	defer fake.setSelfUpdateCredsMutex.Unlock()
	fake.SetSelfUpdateCredsStub = nil
	fake.setSelfUpdateCredsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIClient) SetSelfUpdateCredsReturnsOnCall(i int, result1 error) {
	fake.setSelfUpdateCredsMutex.Lock()
	defer fake.setSelfUpdateCredsMutex.Unlock()
	fake.SetSelfUpdateCredsStub = nil
	if fake.setSelfUpdateCredsReturnsOnCall == nil {
		fake.setSelfUpdateCredsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setSelfUpdateCredsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.setSelfUpdateCredsMutex.RLock()
	defer fake.setSelfUpdateCredsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ credhub.IClient = new(FakeIClient)
